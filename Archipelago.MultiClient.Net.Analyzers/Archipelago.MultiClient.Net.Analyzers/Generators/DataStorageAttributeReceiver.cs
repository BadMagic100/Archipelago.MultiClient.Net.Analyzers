using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;

namespace Archipelago.MultiClient.Net.Analyzers.Generators
{
    internal record DataStorageField(IFieldSymbol Field, AttributeData Data);
    internal record DataStorageContainer(INamedTypeSymbol ContainingType, ImmutableArray<DataStorageField> Fields);

    internal class DataStorageAttributeReceiver : ISyntaxContextReceiver
    {
        private List<DataStorageContainer> containers = new();
        public IReadOnlyList<DataStorageContainer> Containers => containers;

        public void OnVisitSyntaxNode(GeneratorSyntaxContext context)
        {
            if (context.Node is not ClassDeclarationSyntax cd)
            {
                return;
            }

            // the attribute should always be present in the compilation with this since it's generated by this assembly
            INamedTypeSymbol attrSymbol = context.SemanticModel.Compilation.GetTypeByMetadataName(DataStorageAttributeGenerator.AttributeFullName)!;
            INamedTypeSymbol? type = context.SemanticModel.GetDeclaredSymbol(cd);

            if (type == null)
            {
                return;
            }

            // todo - auto detect the session. Could be difficult if it's defined in some enclosing scope, and we still need the constructor
            //        with a name because we could have to disambiguate between 2 or more sessions.
            List<DataStorageField> fields = [];
            foreach (ISymbol member in type.GetMembers())
            {
                if (member is not IFieldSymbol field)
                {
                    continue;
                }
                AttributeData? data = field.GetAttributes()
                    .FirstOrDefault(ad => attrSymbol.Equals(ad.AttributeClass, SymbolEqualityComparer.Default));
                if (data != null)
                {
                    fields.Add(new DataStorageField(field, data));
                }
            }

            if (fields.Count > 0)
            {
                containers.Add(new DataStorageContainer(type, ImmutableArray.Create(fields.ToArray())));
            }
        }
    }
}
